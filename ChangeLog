Changes in v0.12

 * Fixed the visible satellites only appear in slot 0 bug in NMEA mode.
 * Added altitude, HDOP, fix, and #svs to the satellite screen.
 * Not linking Garmin or TAIP protocols into the binary anymore.
 * Scale is now bright instead of dimmed.

Changes in v0.11

 * Derrick Brashear added earthmate support, his earthmate is currently
   broken, so someone else should probably test if it works :)
 * Fixed parse_mapsonus.py to deal with lines without proper line endings.
   Now it should almost be able to parse the plain text version of the raw
   route format as well (except for that one '<XMP>' test I still have there).
 * Allow for cycling through the screens when the down button is not released.
 * Genixia's suggestion to change the satellite signal scaling to display a
   wider range (20-68).
 * Generalized new_sat helper function, now TSIP uses it as well.
 * Some changes for earthmate, I hope I didn't break anything that wasn't
   already broken.
 * Moved generic helper functions for the protocol parsers into
   gps_protocol.c.
 * More useful patches from Derrick, parsing config.ini for default options.
   Showing what state we toggled a menu entry to once it is selected.
   Sending Motorola Oncore init sentence to enable RMC, GSA, and GSV logging.
 * Added a 'permanent' setting for popup descriptions.
 * Went with tfabris's suggestion and changed rubberband so that it highlights
   the next section of the route.
 * Skipping directories and sorting the list of routes.

Changes in v0.10

 * Updated README, it got outdated fast.
 * Don't need to decode the signal level twice with the TSIP protocol.
 * Another trivial to implement, but nice suggestion from ellweber. Draw
   a circle/center point for the satellite locations.
 * Changed the way we collect satellite signal and position information in the
   NMEA parser to avoid the 'no satellite data' from popping up.
 * Try to update the satellite signal screen even before we get a lock.
 * Polling the Trimbles more agressively for satellite tracking information
   where there is no fix yet.
 * Increased the size of the track log.
 * Shortened the time needed for a long-press to switch the screen.
 * Trigger the long-press switch as soon as we hit the timeout, before
   the button is released.
 * Improved the "Waiting for gps location" and "No satellite data" msgs
   according to tfabris's suggestions.
 * Only drawing 8 tracked sats, so we have some room to add more data in the
   satellite screen (# satellites, type of fix, dillution of precision). Data
   isn't there yet though :)
 * Left/right button in the route display switches between waypoints.
 * Added the handshake that should kick a Tripmate into NMEA mode.

Changes in v0.9

 * Added a satellite signal view, seems to work for both TSIP and NMEA.
   Can not be used in either Garmin or TAIP because those protocols don't seem
   to support getting satellite signal and track information.
 * Fixed decoding of doubles for Garmin protocol.
 * Added simple 'incar' executable, exits with a 'true' value whenever we're
   in dc-mode. Can be used in preinit scripts.
 * Shortened the error message timeout to 1 second, got impatient.
 * Opening serial non-blocking and set it to blocking after we configure it.
 * Explicitly flushing serial output before closing the port.

Changes in v0.8

 * Fixed TSIP protocol decoding, it turned out that ARM doubles are IEEE
   format but with the words swapped.

Changes in v0.7

 * Using ellwebers suggestion to freeze the bearing pointer whenever the speed
   drops below 1-2 km/h.
 * Initialize map center coordinate on the first fix when no route is loaded.
 * Removed absolute/relative option. It didn't do much for distances and the
   attempt to get local time from UTC was wrong anyways.
 * Using 8O1 instead of 8N1 for TSIP.
 * The next three are some of genixia's suggestions
   Added menu entry to toggle the 'textual turn description' popup in the
   map screen.
 * Swapped location of the scale and coordinate on the map screen.
 * Dumbed down the route tracking algorithm, you can twist the knob to force
   gpsapp to pick the next or previous waypoint.

Changes in v0.6

 * Using ascii route description file.
 * Always check line length for overflow, otherwise we forget to scroll when a
   new route is loaded and the new top entry is too long.
 * Stripping turn directions from the waypoint descriptions and dynamically
   generate them whenever displaying. This way we can correct the instructions
   even when approaching a waypoint from a different direction.

Changes in v0.5

 * Changed NMEA parser to accept floats in the time field. My idea of the
   VTG sentence was completely wrong, fixed that too.
 * Do not log a position in the track log when it is the same as the last entry.
 * Genixia noticed that the player was still getting button release events
   because we didn't hijack them and that we never bound the last button in our
   list due to an off-by-one count.
 * Use the quick distance calculation instead of the iterative version. The
   iteration blows up somewhere when python 1.5 is used instead of 2.x.

Changes in v0.4

 * Popup messages didn't automatically continue popping up if it weren't for
   other events that triggered a screen refresh.
 * Changed speed calculation, now we're averaging the actual speed towards the
   next point on the route and use a smaller averaging factor.
 * Was testing for overflow in vfdlib_drawLine in the wrong place, large
   negative numbers would still slip through.
 * Removed static buffers in formatdist and time_estimate.
 * Changed serial handling a bit, we pass character instead of line at a time
   to the protocol specific handler. This made it easier to add other protocols.
 * Added code to handle Garmin and Trimble TSIP/TAIP protocols, but only
   Garmin has been tested. You can start gpsapp [nmea|garmin|tsip|taip] to
   select any specific protocol.

Changes in v0.3

 * There was a clipping problem in vfdlib_drawLine where it was writing bits
   outside of the display area. The fix I had implemented was very hardhanded
   by simply checking every single pixel. Figured out where the integer
   overflow occured and replaced the hack with a far cleaner (and somewhat
   faster) solution that simply avoids drawing the lines that cause the
   overflow.
 * Doing a weighted average over the approximate past 2-4 minutes of speed
   measurements (depending on GPS reporting rate). The previous way of using
   the gps speed estimate directly made ETA/ETE calculations mostly unusable.

Changes in v0.2

 * First official release.

